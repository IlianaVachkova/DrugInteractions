// <auto-generated />
using DrugInteractions.Data;
using DrugInteractions.Data.Models.Drugs;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace DrugInteractions.Data.Migrations
{
    [DbContext(typeof(DrugInteractionsDbContext))]
    [Migration("20180104113016_AddSideEffectValidation")]
    partial class AddSideEffectValidation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DrugInteractions.Data.Models.Brands.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdminId");

                    b.Property<DateTime>("DateOfAddition");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("DrugInteractions.Data.Models.Drugs.Drug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActiveSubstances")
                        .IsRequired();

                    b.Property<int>("BrandId");

                    b.Property<DateTime>("DateOfAddition");

                    b.Property<string>("Description");

                    b.Property<int>("DrugGroupId");

                    b.Property<string>("Excipients");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<int>("PharmaceuticalForm");

                    b.Property<string>("RepresentativeId");

                    b.Property<string>("Usage");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("DrugGroupId");

                    b.HasIndex("RepresentativeId");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("DrugInteractions.Data.Models.Drugs.DrugGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdminId");

                    b.Property<DateTime>("DateOfAddition");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("DrugGroups");
                });

            modelBuilder.Entity("DrugInteractions.Data.Models.IntermediateTables.DrugSideEffect", b =>
                {
                    b.Property<int>("DrugId");

                    b.Property<int>("SideEffectId");

                    b.HasKey("DrugId", "SideEffectId");

                    b.HasIndex("SideEffectId");

                    b.ToTable("DrugSideEffect");
                });

            modelBuilder.Entity("DrugInteractions.Data.Models.SideEffects.SideEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdminId");

                    b.Property<DateTime>("DateOfAddition");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("SideEffectGroupId");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("SideEffectGroupId");

                    b.ToTable("SideEffects");
                });

            modelBuilder.Entity("DrugInteractions.Data.Models.SideEffects.SideEffectGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdminId");

                    b.Property<DateTime>("DateOfAddition");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("SideEffectGroups");
                });

            modelBuilder.Entity("DrugInteractions.Data.Models.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DateOfAddition");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Facebook");

                    b.Property<string>("LinkedIn");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DrugInteractions.Data.Models.Brands.Brand", b =>
                {
                    b.HasOne("DrugInteractions.Data.Models.Users.User", "Admin")
                        .WithMany("Brands")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("DrugInteractions.Data.Models.Drugs.Drug", b =>
                {
                    b.HasOne("DrugInteractions.Data.Models.Brands.Brand", "Brand")
                        .WithMany("Drugs")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DrugInteractions.Data.Models.Drugs.DrugGroup", "DrugGroup")
                        .WithMany("Drugs")
                        .HasForeignKey("DrugGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DrugInteractions.Data.Models.Users.User", "Representative")
                        .WithMany("Drugs")
                        .HasForeignKey("RepresentativeId");
                });

            modelBuilder.Entity("DrugInteractions.Data.Models.Drugs.DrugGroup", b =>
                {
                    b.HasOne("DrugInteractions.Data.Models.Users.User", "Admin")
                        .WithMany("DrugGroups")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("DrugInteractions.Data.Models.IntermediateTables.DrugSideEffect", b =>
                {
                    b.HasOne("DrugInteractions.Data.Models.Drugs.Drug", "Drug")
                        .WithMany("SideEffects")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DrugInteractions.Data.Models.SideEffects.SideEffect", "SideEffect")
                        .WithMany("Drugs")
                        .HasForeignKey("SideEffectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DrugInteractions.Data.Models.SideEffects.SideEffect", b =>
                {
                    b.HasOne("DrugInteractions.Data.Models.Users.User", "Admin")
                        .WithMany("SideEffects")
                        .HasForeignKey("AdminId");

                    b.HasOne("DrugInteractions.Data.Models.SideEffects.SideEffectGroup", "SideEffectGroup")
                        .WithMany("SideEffects")
                        .HasForeignKey("SideEffectGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DrugInteractions.Data.Models.SideEffects.SideEffectGroup", b =>
                {
                    b.HasOne("DrugInteractions.Data.Models.Users.User", "Admin")
                        .WithMany("SideEffectGroups")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DrugInteractions.Data.Models.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DrugInteractions.Data.Models.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DrugInteractions.Data.Models.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DrugInteractions.Data.Models.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
